{"version":3,"file":"static/js/6108.7a769377.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddEvent.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport {\n  Autocomplete,\n  Button,\n  DataTable,\n  EventSubscriptionIcon,\n  Grid,\n  InputBox,\n} from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { api } from \"api\";\nimport { NotificationEventType } from \"api/consoleApi\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\ninterface IAddEventProps {\n  open: boolean;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst AddEvent = ({\n  open,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IAddEventProps) => {\n  const dispatch = useAppDispatch();\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [suffix, setSuffix] = useState<string>(\"\");\n  const [arn, setArn] = useState<string>(\"\");\n  const [selectedEvents, setSelectedEvents] = useState<NotificationEventType[]>(\n    [],\n  );\n  const [arnList, setArnList] = useState<string[] | undefined>([]);\n\n  const addRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    api.buckets\n      .createBucketEvent(selectedBucket, {\n        configuration: {\n          arn: arn,\n          events: selectedEvents,\n          prefix: prefix,\n          suffix: suffix,\n        },\n        ignoreExisting: true,\n      })\n      .then(() => {\n        setAddLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchArnList = useCallback(() => {\n    setAddLoading(true);\n    api.admin\n      .arnList()\n      .then((res) => {\n        if (res.data.arns !== null) {\n          setArnList(res.data.arns);\n        }\n        setAddLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  useEffect(() => {\n    fetchArnList();\n  }, [fetchArnList]);\n\n  const events = [\n    { label: \"PUT - Object Uploaded\", value: NotificationEventType.Put },\n    { label: \"GET - Object accessed\", value: NotificationEventType.Get },\n    { label: \"DELETE - Object Deleted\", value: NotificationEventType.Delete },\n    {\n      label: \"REPLICA - Object Replicated\",\n      value: NotificationEventType.Replica,\n    },\n    { label: \"ILM - Object Transitioned\", value: NotificationEventType.Ilm },\n    {\n      label:\n        \"SCANNER - Object has too many versions / Prefixes has too many sub-folders\",\n      value: NotificationEventType.Scanner,\n    },\n  ];\n\n  const handleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = event.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: NotificationEventType[] = [...selectedEvents];\n\n    if (checked) {\n      elements.push(value as NotificationEventType);\n    } else {\n      elements = elements.filter((element) => element !== value);\n    }\n\n    setSelectedEvents(elements);\n  };\n\n  const arnValues = arnList?.map((arnConstant) => ({\n    label: arnConstant,\n    value: arnConstant,\n  }));\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Subscribe To Bucket Events\"\n      titleIcon={<EventSubscriptionIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          addRecord(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} sx={modalBasic.formScrollable}>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                ...formFieldStyles.formFieldRow,\n                \"& div div .MuiOutlinedInput-root\": {\n                  padding: 0,\n                },\n              }}\n            >\n              <Autocomplete\n                onChange={(value: string) => {\n                  setArn(value);\n                }}\n                id=\"select-access-policy\"\n                name=\"select-access-policy\"\n                label={\"ARN\"}\n                value={arn}\n                options={arnValues || []}\n                helpTip={\n                  <Fragment>\n                    <a\n                      target=\"blank\"\n                      href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html\"\n                    >\n                      Amazon Resource Name\n                    </a>\n                  </Fragment>\n                }\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <InputBox\n                id=\"prefix-input\"\n                name=\"prefix-input\"\n                label=\"Prefix\"\n                value={prefix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPrefix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <InputBox\n                id=\"suffix-input\"\n                name=\"suffix-input\"\n                label=\"Suffix\"\n                value={suffix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setSuffix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <DataTable\n                columns={[{ label: \"Event\", elementKey: \"label\" }]}\n                idField={\"value\"}\n                records={events}\n                onSelect={handleClick}\n                selectedItems={selectedEvents}\n                noBackground\n                customPaperHeight={\"260px\"}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"cancel-add-event\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={addLoading}\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              label={\"Cancel\"}\n            />\n            <Button\n              id={\"save-event\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={addLoading || arn === \"\" || selectedEvents.length === 0}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default AddEvent;\n"],"names":["_ref","open","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","addLoading","setAddLoading","useState","prefix","setPrefix","suffix","setSuffix","arn","setArn","selectedEvents","setSelectedEvents","arnList","setArnList","fetchArnList","useCallback","api","admin","then","res","data","arns","catch","err","setModalErrorSnackMessage","useEffect","events","label","value","NotificationEventType","Put","Get","Delete","Replica","Ilm","Scanner","arnValues","map","arnConstant","_jsx","ModalWrapper","modalOpen","onClose","title","titleIcon","EventSubscriptionIcon","children","noValidate","autoComplete","onSubmit","e","preventDefault","buckets","createBucketEvent","configuration","ignoreExisting","_jsxs","Grid","container","item","xs","sx","modalBasic","formScrollable","formFieldStyles","formFieldRow","padding","Autocomplete","onChange","id","name","options","helpTip","Fragment","target","href","InputBox","DataTable","columns","elementKey","idField","records","onSelect","event","targetD","checked","elements","push","filter","element","selectedItems","noBackground","customPaperHeight","modalStyleUtils","modalButtonBar","Button","type","variant","disabled","onClick","length"],"sourceRoot":""}