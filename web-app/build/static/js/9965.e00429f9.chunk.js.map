{"version":3,"file":"static/js/9965.e00429f9.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AccessRulePanel.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { AddIcon, Button, DataTable, SectionTitle, HelpTip } from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { api } from \"api\";\nimport { AccessRule as IAccessRule } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport { IAM_SCOPES } from \"../../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../../common/SecureComponent\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../../systemSlice\";\nimport { selBucketDetailsLoading } from \"./bucketDetailsSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport withSuspense from \"../../Common/Components/withSuspense\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\n\nconst AddAccessRuleModal = withSuspense(\n  React.lazy(() => import(\"./AddAccessRule\")),\n);\nconst DeleteAccessRuleModal = withSuspense(\n  React.lazy(() => import(\"./DeleteAccessRule\")),\n);\nconst EditAccessRuleModal = withSuspense(\n  React.lazy(() => import(\"./EditAccessRule\")),\n);\n\nconst AccessRule = () => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n\n  const loadingBucket = useSelector(selBucketDetailsLoading);\n\n  const [loadingAccessRules, setLoadingAccessRules] = useState<boolean>(true);\n  const [accessRules, setAccessRules] = useState<IAccessRule[] | undefined>([]);\n  const [addAccessRuleOpen, setAddAccessRuleOpen] = useState<boolean>(false);\n  const [deleteAccessRuleOpen, setDeleteAccessRuleOpen] =\n    useState<boolean>(false);\n  const [accessRuleToDelete, setAccessRuleToDelete] = useState<string>(\"\");\n  const [editAccessRuleOpen, setEditAccessRuleOpen] = useState<boolean>(false);\n  const [accessRuleToEdit, setAccessRuleToEdit] = useState<string>(\"\");\n  const [initialAccess, setInitialAccess] = useState<string>(\"\");\n\n  const bucketName = params.bucketName || \"\";\n\n  const displayAccessRules = hasPermission(bucketName, [\n    IAM_SCOPES.S3_GET_BUCKET_POLICY,\n    IAM_SCOPES.S3_GET_ACTIONS,\n  ]);\n\n  const deleteAccessRules = hasPermission(bucketName, [\n    IAM_SCOPES.S3_DELETE_BUCKET_POLICY,\n  ]);\n\n  const editAccessRules = hasPermission(bucketName, [\n    IAM_SCOPES.S3_PUT_BUCKET_POLICY,\n    IAM_SCOPES.S3_PUT_ACTIONS,\n  ]);\n\n  useEffect(() => {\n    if (loadingBucket) {\n      setLoadingAccessRules(true);\n    }\n  }, [loadingBucket, setLoadingAccessRules]);\n\n  const AccessRuleActions = [\n    {\n      type: \"delete\",\n      disableButtonFunction: () => !deleteAccessRules,\n      onClick: (accessRule: any) => {\n        setDeleteAccessRuleOpen(true);\n        setAccessRuleToDelete(accessRule.prefix);\n      },\n    },\n    {\n      type: \"view\",\n      disableButtonFunction: () => !editAccessRules,\n      onClick: (accessRule: any) => {\n        setAccessRuleToEdit(accessRule.prefix);\n        setInitialAccess(accessRule.access);\n        setEditAccessRuleOpen(true);\n      },\n    },\n  ];\n\n  useEffect(() => {\n    dispatch(setHelpName(\"bucket_detail_prefix\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (loadingAccessRules) {\n      if (displayAccessRules) {\n        api.bucket\n          .listAccessRulesWithBucket(bucketName)\n          .then((res) => {\n            setAccessRules(res.data.accessRules);\n            setLoadingAccessRules(false);\n          })\n          .catch((err) => {\n            dispatch(setErrorSnackMessage(errorToHandler(err)));\n            setLoadingAccessRules(false);\n          });\n      } else {\n        setLoadingAccessRules(false);\n      }\n    }\n  }, [loadingAccessRules, dispatch, displayAccessRules, bucketName]);\n\n  const closeAddAccessRuleModal = () => {\n    setAddAccessRuleOpen(false);\n    setLoadingAccessRules(true);\n  };\n\n  const closeDeleteAccessRuleModal = () => {\n    setDeleteAccessRuleOpen(false);\n    setLoadingAccessRules(true);\n  };\n\n  const closeEditAccessRuleModal = () => {\n    setEditAccessRuleOpen(false);\n    setLoadingAccessRules(true);\n  };\n\n  return (\n    <Fragment>\n      {addAccessRuleOpen && (\n        <AddAccessRuleModal\n          modalOpen={addAccessRuleOpen}\n          onClose={closeAddAccessRuleModal}\n          bucket={bucketName}\n        />\n      )}\n      {deleteAccessRuleOpen && (\n        <DeleteAccessRuleModal\n          modalOpen={deleteAccessRuleOpen}\n          onClose={closeDeleteAccessRuleModal}\n          bucket={bucketName}\n          toDelete={accessRuleToDelete}\n        />\n      )}\n      {editAccessRuleOpen && (\n        <EditAccessRuleModal\n          modalOpen={editAccessRuleOpen}\n          onClose={closeEditAccessRuleModal}\n          bucket={bucketName}\n          toEdit={accessRuleToEdit}\n          initial={initialAccess}\n        />\n      )}\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <SecureComponent\n            scopes={[\n              IAM_SCOPES.S3_GET_BUCKET_POLICY,\n              IAM_SCOPES.S3_PUT_BUCKET_POLICY,\n              IAM_SCOPES.S3_GET_ACTIONS,\n              IAM_SCOPES.S3_PUT_ACTIONS,\n            ]}\n            resource={bucketName}\n            matchAll\n            errorProps={{ disabled: true }}\n          >\n            <TooltipWrapper tooltip={\"Add Access Rule\"}>\n              <Button\n                id={\"add-bucket-access-rule\"}\n                onClick={() => {\n                  setAddAccessRuleOpen(true);\n                }}\n                label={\"Add Access Rule\"}\n                icon={<AddIcon />}\n                variant={\"callAction\"}\n              />\n            </TooltipWrapper>\n          </SecureComponent>\n        }\n      >\n        <HelpTip\n          content={\n            <Fragment>\n              Setting an{\" \"}\n              <a\n                href=\"https://min.io/docs/minio/linux/reference/minio-mc/mc-anonymous-set.html\"\n                target=\"blank\"\n              >\n                Anonymous\n              </a>{\" \"}\n              policy allows clients to access the Bucket or prefix contents and\n              perform actions consistent with the specified policy without\n              authentication.\n            </Fragment>\n          }\n          placement=\"right\"\n        >\n          Anonymous Access\n        </HelpTip>\n      </SectionTitle>\n      <SecureComponent\n        scopes={[IAM_SCOPES.S3_GET_BUCKET_POLICY, IAM_SCOPES.S3_GET_ACTIONS]}\n        resource={bucketName}\n        errorProps={{ disabled: true }}\n      >\n        <DataTable\n          itemActions={AccessRuleActions}\n          columns={[\n            {\n              label: \"Prefix\",\n              elementKey: \"prefix\",\n              renderFunction: (prefix: string) => {\n                return prefix || \"/\";\n              },\n            },\n            { label: \"Access\", elementKey: \"access\" },\n          ]}\n          isLoading={loadingAccessRules}\n          records={accessRules || []}\n          entityName=\"Access Rules\"\n          idField=\"prefix\"\n        />\n      </SecureComponent>\n    </Fragment>\n  );\n};\n\nexport default AccessRule;\n"],"names":["AddAccessRuleModal","withSuspense","React","DeleteAccessRuleModal","EditAccessRuleModal","AccessRule","dispatch","useAppDispatch","params","useParams","loadingBucket","useSelector","selBucketDetailsLoading","loadingAccessRules","setLoadingAccessRules","useState","accessRules","setAccessRules","addAccessRuleOpen","setAddAccessRuleOpen","deleteAccessRuleOpen","setDeleteAccessRuleOpen","accessRuleToDelete","setAccessRuleToDelete","editAccessRuleOpen","setEditAccessRuleOpen","accessRuleToEdit","setAccessRuleToEdit","initialAccess","setInitialAccess","bucketName","displayAccessRules","hasPermission","IAM_SCOPES","S3_GET_BUCKET_POLICY","S3_GET_ACTIONS","deleteAccessRules","S3_DELETE_BUCKET_POLICY","editAccessRules","S3_PUT_BUCKET_POLICY","S3_PUT_ACTIONS","useEffect","AccessRuleActions","type","disableButtonFunction","onClick","accessRule","prefix","access","setHelpName","api","bucket","listAccessRulesWithBucket","then","res","data","catch","err","setErrorSnackMessage","errorToHandler","_jsxs","Fragment","children","_jsx","modalOpen","onClose","closeAddAccessRuleModal","closeDeleteAccessRuleModal","toDelete","closeEditAccessRuleModal","toEdit","initial","SectionTitle","separator","sx","marginBottom","actions","SecureComponent","scopes","resource","matchAll","errorProps","disabled","TooltipWrapper","tooltip","Button","id","label","icon","AddIcon","variant","HelpTip","content","href","target","placement","DataTable","itemActions","columns","elementKey","renderFunction","isLoading","records","entityName","idField"],"sourceRoot":""}