{"version":3,"file":"static/js/459.65dbecac.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddReplicationModal.tsx","screens/Console/Common/FormComponents/InputUnitMenu/InputUnitMenu.tsx","screens/Console/Common/FormComponents/QueryMultiSelector/QueryMultiSelector.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport {\n  Box,\n  BucketReplicationIcon,\n  Button,\n  FormLayout,\n  Grid,\n  InputBox,\n  Select,\n  Switch,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { BucketReplicationRule } from \"../types\";\nimport { getBytes, k8sScalarUnitsExcluding } from \"../../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport QueryMultiSelector from \"../../Common/FormComponents/QueryMultiSelector/QueryMultiSelector\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IReplicationModal {\n  open: boolean;\n  closeModalAndRefresh: () => any;\n  bucketName: string;\n\n  setReplicationRules: BucketReplicationRule[];\n}\n\nconst AddReplicationModal = ({\n  open,\n  closeModalAndRefresh,\n  bucketName,\n  setReplicationRules,\n}: IReplicationModal) => {\n  const dispatch = useAppDispatch();\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [priority, setPriority] = useState<string>(\"1\");\n  const [accessKey, setAccessKey] = useState<string>(\"\");\n  const [secretKey, setSecretKey] = useState<string>(\"\");\n  const [targetURL, setTargetURL] = useState<string>(\"\");\n  const [targetStorageClass, setTargetStorageClass] = useState<string>(\"\");\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [targetBucket, setTargetBucket] = useState<string>(\"\");\n  const [region, setRegion] = useState<string>(\"\");\n  const [useTLS, setUseTLS] = useState<boolean>(true);\n  const [repDeleteMarker, setRepDeleteMarker] = useState<boolean>(true);\n  const [repDelete, setRepDelete] = useState<boolean>(true);\n  const [metadataSync, setMetadataSync] = useState<boolean>(true);\n  const [tags, setTags] = useState<string>(\"\");\n  const [replicationMode, setReplicationMode] = useState<\"async\" | \"sync\">(\n    \"async\",\n  );\n  const [bandwidthScalar, setBandwidthScalar] = useState<string>(\"100\");\n  const [bandwidthUnit, setBandwidthUnit] = useState<string>(\"Gi\");\n  const [healthCheck, setHealthCheck] = useState<string>(\"60\");\n\n  useEffect(() => {\n    if (setReplicationRules.length === 0) {\n      setPriority(\"1\");\n      return;\n    }\n\n    const greatestValue = setReplicationRules.reduce((prevAcc, currValue) => {\n      if (currValue.priority > prevAcc) {\n        return currValue.priority;\n      }\n      return prevAcc;\n    }, 0);\n\n    const nextPriority = greatestValue + 1;\n    setPriority(nextPriority.toString());\n  }, [setReplicationRules]);\n\n  const addRecord = () => {\n    const replicate = [\n      {\n        originBucket: bucketName,\n        destinationBucket: targetBucket,\n      },\n    ];\n\n    const hc = parseInt(healthCheck);\n\n    const endURL = `${useTLS ? \"https://\" : \"http://\"}${targetURL}`;\n\n    const remoteBucketsInfo = {\n      accessKey: accessKey,\n      secretKey: secretKey,\n      targetURL: endURL,\n      region: region,\n      bucketsRelation: replicate,\n      syncMode: replicationMode,\n      bandwidth:\n        replicationMode === \"async\"\n          ? parseInt(getBytes(bandwidthScalar, bandwidthUnit, true))\n          : 0,\n      healthCheckPeriod: hc,\n      prefix: prefix,\n      tags: tags,\n      replicateDeleteMarkers: repDeleteMarker,\n      replicateDeletes: repDelete,\n      priority: parseInt(priority),\n      storageClass: targetStorageClass,\n      replicateMetadata: metadataSync,\n    };\n\n    api.bucketsReplication\n      .setMultiBucketReplication(remoteBucketsInfo)\n      .then((res) => {\n        setAddLoading(false);\n\n        const states = get(res.data, \"replicationState\", []);\n\n        if (states.length > 0) {\n          const itemVal = states[0];\n\n          setAddLoading(false);\n\n          if (itemVal.errorString && itemVal.errorString !== \"\") {\n            dispatch(\n              setModalErrorSnackMessage({\n                errorMessage: itemVal.errorString,\n                detailedError: \"\",\n              }),\n            );\n            return;\n          }\n\n          closeModalAndRefresh();\n\n          return;\n        }\n        dispatch(\n          setModalErrorSnackMessage({\n            errorMessage: \"No changes applied\",\n            detailedError: \"\",\n          }),\n        );\n      })\n      .catch((err) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Set Bucket Replication\"\n      titleIcon={<BucketReplicationIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setAddLoading(true);\n          addRecord();\n        }}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          <InputBox\n            id=\"priority\"\n            name=\"priority\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              if (e.target.validity.valid) {\n                setPriority(e.target.value);\n              }\n            }}\n            label=\"Priority\"\n            value={priority}\n            pattern={\"[0-9]*\"}\n          />\n\n          <InputBox\n            id=\"targetURL\"\n            name=\"targetURL\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setTargetURL(e.target.value);\n            }}\n            placeholder=\"play.min.io\"\n            label=\"Target URL\"\n            value={targetURL}\n          />\n\n          <Switch\n            checked={useTLS}\n            id=\"useTLS\"\n            name=\"useTLS\"\n            label=\"Use TLS\"\n            onChange={(e) => {\n              setUseTLS(e.target.checked);\n            }}\n            value=\"yes\"\n          />\n\n          <InputBox\n            id=\"accessKey\"\n            name=\"accessKey\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setAccessKey(e.target.value);\n            }}\n            label=\"Access Key\"\n            value={accessKey}\n          />\n\n          <InputBox\n            id=\"secretKey\"\n            name=\"secretKey\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setSecretKey(e.target.value);\n            }}\n            label=\"Secret Key\"\n            value={secretKey}\n          />\n\n          <InputBox\n            id=\"targetBucket\"\n            name=\"targetBucket\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setTargetBucket(e.target.value);\n            }}\n            label=\"Target Bucket\"\n            value={targetBucket}\n          />\n\n          <InputBox\n            id=\"region\"\n            name=\"region\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setRegion(e.target.value);\n            }}\n            label=\"Region\"\n            value={region}\n          />\n\n          <Select\n            id=\"replication_mode\"\n            name=\"replication_mode\"\n            onChange={(value) => {\n              setReplicationMode(value as \"async\" | \"sync\");\n            }}\n            label=\"Replication Mode\"\n            value={replicationMode}\n            options={[\n              { label: \"Asynchronous\", value: \"async\" },\n              { label: \"Synchronous\", value: \"sync\" },\n            ]}\n          />\n\n          {replicationMode === \"async\" && (\n            <Box className={\"inputItem\"}>\n              <InputBox\n                type=\"number\"\n                id=\"bandwidth_scalar\"\n                name=\"bandwidth_scalar\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  if (e.target.validity.valid) {\n                    setBandwidthScalar(e.target.value as string);\n                  }\n                }}\n                label=\"Bandwidth\"\n                value={bandwidthScalar}\n                min=\"0\"\n                pattern={\"[0-9]*\"}\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"quota_unit\"}\n                    onUnitChange={(newValue) => {\n                      setBandwidthUnit(newValue);\n                    }}\n                    unitSelected={bandwidthUnit}\n                    unitsList={k8sScalarUnitsExcluding([\"Ki\"])}\n                    disabled={false}\n                  />\n                }\n              />\n            </Box>\n          )}\n\n          <InputBox\n            id=\"healthCheck\"\n            name=\"healthCheck\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setHealthCheck(e.target.value as string);\n            }}\n            label=\"Health Check Duration\"\n            value={healthCheck}\n          />\n\n          <InputBox\n            id=\"storageClass\"\n            name=\"storageClass\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setTargetStorageClass(e.target.value);\n            }}\n            placeholder=\"STANDARD_IA,REDUCED_REDUNDANCY etc\"\n            label=\"Storage Class\"\n            value={targetStorageClass}\n          />\n\n          <fieldset className={\"inputItem\"}>\n            <legend>Object Filters</legend>\n            <InputBox\n              id=\"prefix\"\n              name=\"prefix\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setPrefix(e.target.value);\n              }}\n              placeholder=\"prefix\"\n              label=\"Prefix\"\n              value={prefix}\n            />\n            <QueryMultiSelector\n              name=\"tags\"\n              label=\"Tags\"\n              elements={\"\"}\n              onChange={(vl: string) => {\n                setTags(vl);\n              }}\n              keyPlaceholder=\"Tag Key\"\n              valuePlaceholder=\"Tag Value\"\n              withBorder\n            />\n          </fieldset>\n          <fieldset className={\"inputItem\"}>\n            <legend>Replication Options</legend>\n            <Switch\n              checked={metadataSync}\n              id=\"metadatataSync\"\n              name=\"metadatataSync\"\n              label=\"Metadata Sync\"\n              onChange={(e) => {\n                setMetadataSync(e.target.checked);\n              }}\n              description={\"Metadata Sync\"}\n            />\n            <Switch\n              checked={repDeleteMarker}\n              id=\"deleteMarker\"\n              name=\"deleteMarker\"\n              label=\"Delete Marker\"\n              onChange={(e) => {\n                setRepDeleteMarker(e.target.checked);\n              }}\n              description={\"Replicate soft deletes\"}\n            />\n            <Switch\n              checked={repDelete}\n              id=\"repDelete\"\n              name=\"repDelete\"\n              label=\"Deletes\"\n              onChange={(e) => {\n                setRepDelete(e.target.checked);\n              }}\n              description={\"Replicate versioned deletes\"}\n            />\n          </fieldset>\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"cancel\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={addLoading}\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              label={\"Cancel\"}\n            />\n            <Button\n              id={\"submit\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={addLoading}\n              label={\"Save\"}\n            />\n          </Grid>\n        </FormLayout>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default AddReplicationModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { DropdownSelector, SelectorType } from \"mds\";\nimport styled from \"styled-components\";\nimport get from \"lodash/get\";\n\ninterface IInputUnitBox {\n  id: string;\n  unitSelected: string;\n  unitsList: SelectorType[];\n  disabled?: boolean;\n  onUnitChange?: (newValue: string) => void;\n}\n\nconst UnitMenuButton = styled.button(({ theme }) => ({\n  border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\n  borderRadius: 3,\n  color: get(theme, \"secondaryText\", \"#5B5C5C\"),\n  backgroundColor: get(theme, \"boxBackground\", \"#FBFAFA\"),\n  fontSize: 12,\n}));\n\nconst InputUnitMenu = ({\n  id,\n  unitSelected,\n  unitsList,\n  disabled = false,\n  onUnitChange,\n}: IInputUnitBox) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (newUnit: string) => {\n    setAnchorEl(null);\n    if (newUnit !== \"\" && onUnitChange) {\n      onUnitChange(newUnit);\n    }\n  };\n\n  return (\n    <Fragment>\n      <UnitMenuButton\n        id={`${id}-button`}\n        aria-controls={`${id}-menu`}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? \"true\" : undefined}\n        onClick={handleClick}\n        disabled={disabled}\n        type={\"button\"}\n      >\n        {unitSelected}\n      </UnitMenuButton>\n      <DropdownSelector\n        id={\"upload-main-menu\"}\n        options={unitsList}\n        selectedOption={\"\"}\n        onSelect={(value) => handleClose(value)}\n        hideTriggerAction={() => {\n          handleClose(\"\");\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        anchorOrigin={\"end\"}\n      />\n    </Fragment>\n  );\n};\n\nexport default InputUnitMenu;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  Fragment,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport {\n  AddIcon,\n  Box,\n  Grid,\n  HelpIcon,\n  InputBox,\n  InputLabel,\n  Tooltip,\n} from \"mds\";\n\ninterface IQueryMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst QueryMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  keyPlaceholder = \"\",\n  valuePlaceholder = \"\",\n  onChange,\n  withBorder = false,\n}: IQueryMultiSelector) => {\n  const [currentKeys, setCurrentKeys] = useState<string[]>([\"\"]);\n  const [currentValues, setCurrentValues] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentKeys.length === 1 &&\n      currentKeys[0] === \"\" &&\n      currentValues.length === 1 &&\n      currentValues[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\"&\");\n      let keys = [];\n      let values = [];\n\n      elementsSplit.forEach((element: string) => {\n        const splittedVals = element.split(\"=\");\n        if (splittedVals.length === 2) {\n          keys.push(splittedVals[0]);\n          values.push(splittedVals[1]);\n        }\n      });\n\n      keys.push(\"\");\n      values.push(\"\");\n\n      setCurrentKeys(keys);\n      setCurrentValues(values);\n    }\n  }, [currentKeys, currentValues, elements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    const refScroll = bottomList.current;\n    if (refScroll && currentKeys.length > 1) {\n      refScroll.scrollIntoView(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentKeys]);\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    debouncedOnChange();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentKeys, currentValues]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = () => {\n    if (\n      currentKeys[currentKeys.length - 1].trim() !== \"\" &&\n      currentValues[currentValues.length - 1].trim() !== \"\"\n    ) {\n      const keysList = [...currentKeys];\n      const valuesList = [...currentValues];\n\n      keysList.push(\"\");\n      valuesList.push(\"\");\n\n      setCurrentKeys(keysList);\n      setCurrentValues(valuesList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeKey = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentKeys];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentKeys(updatedElement);\n  };\n\n  const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentValues];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentValues(updatedElement);\n  };\n\n  // Debounce for On Change\n  const debouncedOnChange = debounce(() => {\n    let queryString = \"\";\n\n    currentKeys.forEach((keyVal, index) => {\n      if (currentKeys[index] && currentValues[index]) {\n        let insertString = `${keyVal}=${currentValues[index]}`;\n        if (index !== 0) {\n          insertString = `&${insertString}`;\n        }\n        queryString = `${queryString}${insertString}`;\n      }\n    });\n\n    onChange(queryString);\n  }, 500);\n\n  const inputs = currentValues.map((element, index) => {\n    return (\n      <Grid\n        item\n        xs={12}\n        className={\"lineInputBoxes inputItem\"}\n        key={`query-pair-${name}-${index.toString()}`}\n      >\n        <InputBox\n          id={`${name}-key-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentKeys[index]}\n          onChange={onChangeKey}\n          index={index}\n          placeholder={keyPlaceholder}\n        />\n        <span className={\"queryDiv\"}>:</span>\n        <InputBox\n          id={`${name}-value-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentValues[index]}\n          onChange={onChangeValue}\n          index={index}\n          placeholder={valuePlaceholder}\n          overlayIcon={index === currentValues.length - 1 ? <AddIcon /> : null}\n          overlayAction={() => {\n            addEmptyLine();\n          }}\n        />\n      </Grid>\n    );\n  });\n\n  return (\n    <Fragment>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          \"& .lineInputBoxes\": {\n            display: \"flex\",\n          },\n          \"& .queryDiv\": {\n            alignSelf: \"center\",\n            margin: \"-15px 4px 0\",\n            fontWeight: 600,\n          },\n        }}\n        className={\"inputItem\"}\n      >\n        <InputLabel>\n          {label}\n          {tooltip !== \"\" && (\n            <Box\n              sx={{\n                marginLeft: 5,\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .min-icon\": {\n                  width: 13,\n                },\n              }}\n            >\n              <Tooltip tooltip={tooltip} placement=\"top\">\n                <HelpIcon style={{ width: 13, height: 13 }} />\n              </Tooltip>\n            </Box>\n          )}\n        </InputLabel>\n        <Box\n          withBorders={withBorder}\n          sx={{\n            padding: 15,\n            height: 150,\n            overflowY: \"auto\",\n            position: \"relative\",\n            marginTop: 15,\n          }}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Box>\n      </Grid>\n    </Fragment>\n  );\n};\nexport default QueryMultiSelector;\n"],"names":["_ref","open","closeModalAndRefresh","bucketName","setReplicationRules","dispatch","useAppDispatch","addLoading","setAddLoading","useState","priority","setPriority","accessKey","setAccessKey","secretKey","setSecretKey","targetURL","setTargetURL","targetStorageClass","setTargetStorageClass","prefix","setPrefix","targetBucket","setTargetBucket","region","setRegion","useTLS","setUseTLS","repDeleteMarker","setRepDeleteMarker","repDelete","setRepDelete","metadataSync","setMetadataSync","tags","setTags","replicationMode","setReplicationMode","bandwidthScalar","setBandwidthScalar","bandwidthUnit","setBandwidthUnit","healthCheck","setHealthCheck","useEffect","length","greatestValue","reduce","prevAcc","currValue","toString","_jsx","ModalWrapper","modalOpen","onClose","title","titleIcon","BucketReplicationIcon","children","noValidate","autoComplete","onSubmit","e","preventDefault","addRecord","replicate","originBucket","destinationBucket","hc","parseInt","endURL","concat","remoteBucketsInfo","bucketsRelation","syncMode","bandwidth","getBytes","healthCheckPeriod","replicateDeleteMarkers","replicateDeletes","storageClass","replicateMetadata","api","bucketsReplication","setMultiBucketReplication","then","res","states","get","data","itemVal","errorString","setModalErrorSnackMessage","errorMessage","detailedError","catch","err","errorToHandler","error","_jsxs","FormLayout","withBorders","containerPadding","InputBox","id","name","onChange","target","validity","valid","value","label","pattern","placeholder","Switch","checked","Select","options","Box","className","type","min","overlayObject","InputUnitMenu","onUnitChange","newValue","unitSelected","unitsList","k8sScalarUnitsExcluding","disabled","QueryMultiSelector","elements","vl","keyPlaceholder","valuePlaceholder","withBorder","description","Grid","item","xs","sx","modalStyleUtils","modalButtonBar","Button","variant","onClick","color","UnitMenuButton","styled","button","theme","border","borderRadius","backgroundColor","fontSize","_ref2","anchorEl","setAnchorEl","React","Boolean","handleClose","newUnit","Fragment","undefined","event","currentTarget","DropdownSelector","selectedOption","onSelect","hideTriggerAction","anchorOrigin","tooltip","currentKeys","setCurrentKeys","currentValues","setCurrentValues","bottomList","createRef","elementsSplit","split","keys","values","forEach","element","splittedVals","push","refScroll","current","scrollIntoView","firstUpdate","useRef","useLayoutEffect","debouncedOnChange","onChangeKey","persist","updatedElement","index","onChangeValue","debounce","queryString","keyVal","insertString","inputs","map","overlayIcon","AddIcon","overlayAction","addEmptyLine","trim","keysList","valuesList","display","alignSelf","margin","fontWeight","InputLabel","marginLeft","alignItems","width","Tooltip","placement","HelpIcon","style","height","padding","overflowY","position","marginTop","ref"],"sourceRoot":""}