{"version":3,"file":"static/js/614.f6cdf349.chunk.js","mappings":"uOA0CA,MA0GA,EA1GsBA,IAKC,IALA,UACrBC,EAAS,QACTC,EAAO,OACPC,EAAM,eACNC,GACeJ,EACf,MAAMK,GAAWC,EAAAA,EAAAA,OAEVC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAc,aAE1DG,EAAAA,EAAAA,YAAU,KACJR,GACFI,EAAUJ,EACZ,GACC,CAACA,IA6BJ,OACES,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACXb,UAAWA,EACXc,MAAM,4BACNb,QAASA,EACTc,WAAWH,EAAAA,EAAAA,KAACI,EAAAA,IAAiB,IAAIC,UAEjCC,EAAAA,EAAAA,MAACC,EAAAA,IAAU,CAACC,aAAa,EAAOC,kBAAkB,EAAMJ,SAAA,EACtDL,EAAAA,EAAAA,KAACU,EAAAA,IAAQ,CACPC,MAAOjB,EACPkB,MAAO,SACPC,GAAI,SACJC,KAAM,SACNC,YAAa,eACbC,SAAWC,IACTtB,EAAUsB,EAAEC,OAAOP,MAAM,EAE3BQ,QACE,2SAGJnB,EAAAA,EAAAA,KAACoB,EAAAA,IAAM,CACLP,GAAG,SACHC,KAAK,SACLE,SAAWL,IACTb,EAAkBa,EAAM,EAE1BC,MAAM,SACND,MAAOd,EACPwB,QAxDc,CACpB,CAAET,MAAO,WAAYD,MAAO,YAC5B,CAAEC,MAAO,YAAaD,MAAO,aAC7B,CAAEC,MAAO,YAAaD,MAAO,cAsDvBW,UAAU,EACVC,SACEvB,EAAAA,EAAAA,KAACwB,EAAAA,SAAQ,CAAAnB,SAAC,0EAKZoB,iBAAiB,WAEnBnB,EAAAA,EAAAA,MAACoB,EAAAA,IAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAIC,EAAAA,GAAgBC,eAAe1B,SAAA,EACpDL,EAAAA,EAAAA,KAACgC,EAAAA,IAAM,CACLnB,GAAI,QACJoB,KAAK,SACLC,QAAQ,UACRC,QAjEQC,KAChBzC,EAAU,IACVG,EAAkB,WAAW,EAgErBc,MAAO,WAGTZ,EAAAA,EAAAA,KAACgC,EAAAA,IAAM,CACLnB,GAAI,kBACJoB,KAAK,SACLC,QAAQ,aACRZ,SAA4B,KAAlB5B,EAAO2C,OACjBF,QArEYG,KACpBC,EAAAA,EAAIjD,OACDkD,wBAAwBlD,EAAQ,CAC/BI,OAAQA,EACR+C,OAAQ5C,IAET6C,MAAMC,IACLnD,GAASoD,EAAAA,EAAAA,IAAmB,mCAC5BvD,GAAS,IAEVwD,OAAOF,IACNnD,GAASsD,EAAAA,EAAAA,KAAqBC,EAAAA,EAAAA,GAAeJ,EAAIK,SACjD3D,GAAS,GACT,EAyDIuB,MAAO,gBAIA,C","sources":["screens/Console/Buckets/BucketDetails/AddAccessRule.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport {\n  AddAccessRuleIcon,\n  Button,\n  FormLayout,\n  Grid,\n  InputBox,\n  Select,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IAddAccessRule {\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n  prefilledRoute?: string;\n}\n\nconst AddAccessRule = ({\n  modalOpen,\n  onClose,\n  bucket,\n  prefilledRoute,\n}: IAddAccessRule) => {\n  const dispatch = useAppDispatch();\n\n  const [prefix, setPrefix] = useState(\"\");\n  const [selectedAccess, setSelectedAccess] = useState<any>(\"readonly\");\n\n  useEffect(() => {\n    if (prefilledRoute) {\n      setPrefix(prefilledRoute);\n    }\n  }, [prefilledRoute]);\n\n  const accessOptions = [\n    { label: \"readonly\", value: \"readonly\" },\n    { label: \"writeonly\", value: \"writeonly\" },\n    { label: \"readwrite\", value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setPrefix(\"\");\n    setSelectedAccess(\"readonly\");\n  };\n\n  const createProcess = () => {\n    api.bucket\n      .setAccessRuleWithBucket(bucket, {\n        prefix: prefix,\n        access: selectedAccess,\n      })\n      .then((res: any) => {\n        dispatch(setSnackBarMessage(\"Access Rule added successfully\"));\n        onClose();\n      })\n      .catch((res) => {\n        dispatch(setErrorSnackMessage(errorToHandler(res.error)));\n        onClose();\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={modalOpen}\n      title=\"Add Anonymous Access Rule\"\n      onClose={onClose}\n      titleIcon={<AddAccessRuleIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <InputBox\n          value={prefix}\n          label={\"Prefix\"}\n          id={\"prefix\"}\n          name={\"prefix\"}\n          placeholder={\"Enter Prefix\"}\n          onChange={(e) => {\n            setPrefix(e.target.value);\n          }}\n          tooltip={\n            \"Enter '/' to apply the rule to all prefixes and objects at the bucket root. Do not include the wildcard asterisk '*' as part of the prefix *unless* it is an explicit part of the prefix name. The Console automatically appends an asterisk to the appropriate sections of the resulting IAM policy.\"\n          }\n        />\n        <Select\n          id=\"access\"\n          name=\"Access\"\n          onChange={(value) => {\n            setSelectedAccess(value);\n          }}\n          label=\"Access\"\n          value={selectedAccess}\n          options={accessOptions}\n          disabled={false}\n          helpTip={\n            <Fragment>\n              Select the desired level of access available to unauthenticated\n              Users\n            </Fragment>\n          }\n          helpTipPlacement=\"right\"\n        />\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n\n          <Button\n            id={\"add-access-save\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={prefix.trim() === \"\"}\n            onClick={createProcess}\n            label={\"Save\"}\n          />\n        </Grid>\n      </FormLayout>\n    </ModalWrapper>\n  );\n};\n\nexport default AddAccessRule;\n"],"names":["_ref","modalOpen","onClose","bucket","prefilledRoute","dispatch","useAppDispatch","prefix","setPrefix","useState","selectedAccess","setSelectedAccess","useEffect","_jsx","ModalWrapper","title","titleIcon","AddAccessRuleIcon","children","_jsxs","FormLayout","withBorders","containerPadding","InputBox","value","label","id","name","placeholder","onChange","e","target","tooltip","Select","options","disabled","helpTip","Fragment","helpTipPlacement","Grid","item","xs","sx","modalStyleUtils","modalButtonBar","Button","type","variant","onClick","resetForm","trim","createProcess","api","setAccessRuleWithBucket","access","then","res","setSnackBarMessage","catch","setErrorSnackMessage","errorToHandler","error"],"sourceRoot":""}