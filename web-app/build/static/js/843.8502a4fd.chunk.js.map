{"version":3,"file":"static/js/843.8502a4fd.chunk.js","mappings":"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","sources":["screens/Console/Trace/Trace.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Box,\n  breakPoints,\n  Button,\n  Checkbox,\n  DataTable,\n  FilterIcon,\n  Grid,\n  InputBox,\n  PageLayout,\n} from \"mds\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { TraceMessage } from \"./types\";\nimport { niceBytes, timeFromDate } from \"../../../common/utils\";\nimport { wsProtocol } from \"../../../utils/wsUtils\";\nimport {\n  setTraceStarted,\n  traceMessageReceived,\n  traceResetMessages,\n} from \"./traceSlice\";\nimport { setHelpName } from \"../../../systemSlice\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\nvar socket: any = null;\n\nconst Trace = () => {\n  const dispatch = useAppDispatch();\n\n  const messages = useSelector((state: AppState) => state.trace.messages);\n  const traceStarted = useSelector(\n    (state: AppState) => state.trace.traceStarted,\n  );\n\n  const [statusCode, setStatusCode] = useState<string>(\"\");\n  const [method, setMethod] = useState<string>(\"\");\n  const [func, setFunc] = useState<string>(\"\");\n  const [path, setPath] = useState<string>(\"\");\n  const [threshold, setThreshold] = useState<number>(0);\n  const [all, setAll] = useState<boolean>(false);\n  const [s3, setS3] = useState<boolean>(true);\n  const [internal, setInternal] = useState<boolean>(false);\n  const [storage, setStorage] = useState<boolean>(false);\n  const [os, setOS] = useState<boolean>(false);\n  const [errors, setErrors] = useState<boolean>(false);\n\n  const [toggleFilter, setToggleFilter] = useState<boolean>(false);\n\n  const startTrace = () => {\n    dispatch(traceResetMessages());\n    const url = new URL(window.location.toString());\n    const isDev = process.env.NODE_ENV === \"development\";\n    const port = isDev ? \"9090\" : url.port;\n\n    let calls = `${s3 ? \"s3,\" : \"\"}${internal ? \"internal,\" : \"\"}${\n      storage ? \"storage,\" : \"\"\n    }${os ? \"os,\" : \"\"}`;\n\n    if (all) {\n      calls = \"all\";\n    }\n    // check if we are using base path, if not this always is `/`\n    const baseLocation = new URL(document.baseURI);\n    const baseUrl = baseLocation.pathname;\n\n    const wsProt = wsProtocol(url.protocol);\n    socket = new WebSocket(\n      `${wsProt}://${\n        url.hostname\n      }:${port}${baseUrl}ws/trace?calls=${calls}&threshold=${threshold}&onlyErrors=${\n        errors ? \"yes\" : \"no\"\n      }&statusCode=${statusCode}&method=${method}&funcname=${func}&path=${path}`,\n    );\n\n    let interval: any | null = null;\n    if (socket !== null) {\n      socket.onopen = () => {\n        console.log(\"WebSocket Client Connected\");\n        dispatch(setTraceStarted(true));\n        socket.send(\"ok\");\n        interval = setInterval(() => {\n          socket.send(\"ok\");\n        }, 10 * 1000);\n      };\n      socket.onmessage = (message: MessageEvent) => {\n        let m: TraceMessage = JSON.parse(message.data.toString());\n\n        m.ptime = DateTime.fromISO(m.time).toJSDate();\n        m.key = Math.random();\n        dispatch(traceMessageReceived(m));\n      };\n      socket.onclose = () => {\n        clearInterval(interval);\n        console.log(\"connection closed by server\");\n        dispatch(setTraceStarted(false));\n      };\n      return () => {\n        socket.close(1000);\n        clearInterval(interval);\n        console.log(\"closing websockets\");\n        setTraceStarted(false);\n      };\n    }\n  };\n\n  const stopTrace = () => {\n    socket.close(1000);\n    dispatch(setTraceStarted(false));\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"trace\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeaderWrapper label={\"Trace\"} actions={<HelpMenu />} />\n\n      <PageLayout>\n        <Box withBorders>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n\n                \"& .trace-Checkbox-label\": {\n                  fontSize: \"14px\",\n                  fontWeight: \"normal\",\n                },\n              }}\n            >\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  padding: \"20px 0px 20px 0\",\n                }}\n              >\n                Calls to Trace\n              </Box>\n              <Box\n                className={`${traceStarted ? \"inactive-state\" : \"\"}`}\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexFlow: \"row\",\n                    \"& .trace-checked-icon\": {\n                      border: \"1px solid red\",\n                    },\n                    [`@media (min-width: ${breakPoints.md}px)`]: {\n                      gap: 30,\n                    },\n                  }}\n                >\n                  <Checkbox\n                    checked={all}\n                    id={\"all_calls\"}\n                    name={\"all_calls\"}\n                    label={\"All\"}\n                    onChange={() => {\n                      setAll(!all);\n                    }}\n                    value={\"all\"}\n                    disabled={traceStarted}\n                  />\n                  <Checkbox\n                    checked={s3 || all}\n                    id={\"s3_calls\"}\n                    name={\"s3_calls\"}\n                    label={\"S3\"}\n                    onChange={() => {\n                      setS3(!s3);\n                    }}\n                    value={\"s3\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={internal || all}\n                    id={\"internal_calls\"}\n                    name={\"internal_calls\"}\n                    label={\"Internal\"}\n                    onChange={() => {\n                      setInternal(!internal);\n                    }}\n                    value={\"internal\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={storage || all}\n                    id={\"storage_calls\"}\n                    name={\"storage_calls\"}\n                    label={\"Storage\"}\n                    onChange={() => {\n                      setStorage(!storage);\n                    }}\n                    value={\"storage\"}\n                    disabled={all || traceStarted}\n                  />\n                  <Checkbox\n                    checked={os || all}\n                    id={\"os_calls\"}\n                    name={\"os_calls\"}\n                    label={\"OS\"}\n                    onChange={() => {\n                      setOS(!os);\n                    }}\n                    value={\"os\"}\n                    disabled={all || traceStarted}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    gap: \"15px\",\n                  }}\n                >\n                  <TooltipWrapper tooltip={\"More filter options\"}>\n                    <Button\n                      id={\"filter-toggle\"}\n                      onClick={() => {\n                        setToggleFilter(!toggleFilter);\n                      }}\n                      label={\"Filters\"}\n                      icon={<FilterIcon />}\n                      variant={\"regular\"}\n                      className={\"filters-toggle-button\"}\n                      style={{\n                        width: \"118px\",\n                        background: toggleFilter ? \"rgba(8, 28, 66, 0.04)\" : \"\",\n                      }}\n                    />\n                  </TooltipWrapper>\n\n                  {!traceStarted && (\n                    <Button\n                      id={\"start-trace\"}\n                      label={\"Start\"}\n                      data-test-id={\"trace-start-button\"}\n                      variant=\"callAction\"\n                      onClick={startTrace}\n                      style={{\n                        width: \"118px\",\n                      }}\n                    />\n                  )}\n                  {traceStarted && (\n                    <Button\n                      id={\"stop-trace\"}\n                      label={\"Stop Trace\"}\n                      data-test-id={\"trace-stop-button\"}\n                      variant=\"callAction\"\n                      onClick={stopTrace}\n                      style={{\n                        width: \"118px\",\n                      }}\n                    />\n                  )}\n                </Box>\n              </Box>\n            </Grid>\n            {toggleFilter ? (\n              <Box\n                useBackground\n                className={`${traceStarted ? \"inactive-state\" : \"\"}`}\n                sx={{\n                  marginTop: \"25px\",\n                  display: \"flex\",\n                  flexFlow: \"column\",\n                  padding: \"30px\",\n                  width: \"100%\",\n\n                  \"& .orient-vertical\": {\n                    flexFlow: \"column\",\n                    \"& label\": {\n                      marginBottom: \"10px\",\n                      fontWeight: 600,\n                    },\n                    \"& .inputRebase\": {\n                      width: \"90%\",\n                    },\n                  },\n\n                  \"& .trace-Checkbox-label\": {\n                    fontSize: \"14px\",\n                    fontWeight: \"normal\",\n                  },\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                  }}\n                >\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-status-code\"\n                    name=\"trace-status-code\"\n                    label=\"Status Code\"\n                    placeholder=\"e.g. 503\"\n                    value={statusCode}\n                    onChange={(e) => {\n                      setStatusCode(e.target.value);\n                    }}\n                    disabled={traceStarted}\n                  />\n\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-function-name\"\n                    name=\"trace-function-name\"\n                    label=\"Function Name\"\n                    placeholder=\"e.g. FunctionName2055\"\n                    value={func}\n                    onChange={(e) => {\n                      setFunc(e.target.value);\n                    }}\n                    disabled={traceStarted}\n                  />\n\n                  <InputBox\n                    className=\"orient-vertical\"\n                    id=\"trace-method\"\n                    name=\"trace-method\"\n                    label=\"Method\"\n                    placeholder=\"e.g. Method 2056\"\n                    value={method}\n                    onChange={(e) => {\n                      setMethod(e.target.value);\n                    }}\n                    disabled={traceStarted}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    gap: \"30px\",\n                    display: \"grid\",\n                    gridTemplateColumns: \"2fr 1fr\",\n                    width: \"100%\",\n                    marginTop: \"33px\",\n                  }}\n                >\n                  <Box\n                    sx={{\n                      flex: 2,\n                      width: \"calc( 100% + 10px)\",\n                    }}\n                  >\n                    <InputBox\n                      className=\"orient-vertical\"\n                      id=\"trace-path\"\n                      name=\"trace-path\"\n                      label=\"Path\"\n                      placeholder=\"e.g. my-bucket/my-prefix/*\"\n                      value={path}\n                      onChange={(e) => {\n                        setPath(e.target.value);\n                      }}\n                      disabled={traceStarted}\n                    />\n                  </Box>\n                  <Box\n                    sx={{\n                      marginLeft: \"15px\",\n                    }}\n                  >\n                    <InputBox\n                      className=\"orient-vertical\"\n                      id=\"trace-fthreshold\"\n                      name=\"trace-fthreshold\"\n                      label=\"Response Threshold\"\n                      type=\"number\"\n                      placeholder=\"e.g. website.io.3249.114.12\"\n                      value={`${threshold}`}\n                      onChange={(e) => {\n                        setThreshold(parseInt(e.target.value));\n                      }}\n                      disabled={traceStarted}\n                    />\n                  </Box>\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"flex-start\",\n                    marginTop: \"40px\",\n                  }}\n                >\n                  <Checkbox\n                    checked={errors}\n                    id={\"only_errors\"}\n                    name={\"only_errors\"}\n                    label={\"Display only Errors\"}\n                    onChange={() => {\n                      setErrors(!errors);\n                    }}\n                    value={\"only_errors\"}\n                    disabled={traceStarted}\n                  />\n                </Box>\n              </Box>\n            ) : null}\n\n            <Grid item xs={12}>\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  marginBottom: \"30px\",\n                  marginTop: \"30px\",\n                }}\n              >\n                Trace Results\n              </Box>\n            </Grid>\n            <Grid item xs={12}>\n              <DataTable\n                columns={[\n                  {\n                    label: \"Time\",\n                    elementKey: \"ptime\",\n                    renderFunction: (time: Date) => {\n                      const timeParse = new Date(time);\n                      return timeFromDate(timeParse);\n                    },\n                    width: 100,\n                  },\n                  { label: \"Name\", elementKey: \"api\" },\n                  {\n                    label: \"Status\",\n                    elementKey: \"\",\n                    renderFunction: (fullElement: TraceMessage) =>\n                      `${fullElement.statusCode} ${fullElement.statusMsg}`,\n                    renderFullObject: true,\n                  },\n                  {\n                    label: \"Location\",\n                    elementKey: \"configuration_id\",\n                    renderFunction: (fullElement: TraceMessage) =>\n                      `${fullElement.host} ${fullElement.client}`,\n                    renderFullObject: true,\n                  },\n                  {\n                    label: \"Load Time\",\n                    elementKey: \"callStats.duration\",\n                    width: 150,\n                  },\n                  {\n                    label: \"Upload\",\n                    elementKey: \"callStats.rx\",\n                    renderFunction: niceBytes,\n                    width: 150,\n                  },\n                  {\n                    label: \"Download\",\n                    elementKey: \"callStats.tx\",\n                    renderFunction: niceBytes,\n                    width: 150,\n                  },\n                ]}\n                isLoading={false}\n                records={messages}\n                entityName=\"Traces\"\n                idField=\"api\"\n                customEmptyMessage={\n                  traceStarted\n                    ? \"No Traced elements received yet\"\n                    : \"Trace is not started yet\"\n                }\n                customPaperHeight={\"calc(100vh - 292px)\"}\n                autoScrollToBottom\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default Trace;\n"],"names":["socket","Trace","dispatch","useAppDispatch","messages","useSelector","state","trace","traceStarted","statusCode","setStatusCode","useState","method","setMethod","func","setFunc","path","setPath","threshold","setThreshold","all","setAll","s3","setS3","internal","setInternal","storage","setStorage","os","setOS","errors","setErrors","toggleFilter","setToggleFilter","useEffect","setHelpName","_jsxs","Fragment","children","_jsx","PageHeaderWrapper","label","actions","HelpMenu","PageLayout","Box","withBorders","Grid","container","item","xs","sx","display","flexFlow","fontSize","fontWeight","padding","className","concat","alignItems","justifyContent","border","breakPoints","md","gap","Checkbox","checked","id","name","onChange","value","disabled","TooltipWrapper","tooltip","Button","onClick","icon","FilterIcon","variant","style","width","background","startTrace","traceResetMessages","url","URL","window","location","toString","port","calls","baseUrl","document","baseURI","pathname","wsProt","wsProtocol","protocol","WebSocket","hostname","interval","onopen","console","log","setTraceStarted","send","setInterval","onmessage","message","m","JSON","parse","data","ptime","DateTime","fromISO","time","toJSDate","key","Math","random","traceMessageReceived","onclose","clearInterval","close","stopTrace","useBackground","marginTop","marginBottom","InputBox","placeholder","e","target","gridTemplateColumns","flex","marginLeft","type","parseInt","DataTable","columns","elementKey","renderFunction","timeParse","Date","timeFromDate","fullElement","statusMsg","renderFullObject","host","client","niceBytes","isLoading","records","entityName","idField","customEmptyMessage","customPaperHeight","autoScrollToBottom"],"sourceRoot":""}