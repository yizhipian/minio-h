{"version":3,"file":"static/js/8010.8ce54818.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/BucketEventsPanel.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  Button,\n  HelpBox,\n  LambdaIcon,\n  DataTable,\n  Grid,\n  SectionTitle,\n  HelpTip,\n} from \"mds\";\nimport { api } from \"api\";\nimport { NotificationConfig } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../../common/SecureComponent\";\nimport { IAM_SCOPES } from \"../../../../common/SecureComponent/permissions\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../../systemSlice\";\nimport { selBucketDetailsLoading } from \"./bucketDetailsSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport withSuspense from \"../../Common/Components/withSuspense\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\n\nconst DeleteEvent = withSuspense(React.lazy(() => import(\"./DeleteEvent\")));\nconst AddEvent = withSuspense(React.lazy(() => import(\"./AddEvent\")));\n\nconst BucketEventsPanel = () => {\n  const dispatch = useAppDispatch();\n  const params = useParams();\n\n  const loadingBucket = useSelector(selBucketDetailsLoading);\n\n  const [addEventScreenOpen, setAddEventScreenOpen] = useState<boolean>(false);\n  const [loadingEvents, setLoadingEvents] = useState<boolean>(true);\n  const [records, setRecords] = useState<NotificationConfig[]>([]);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedEvent, setSelectedEvent] = useState<NotificationConfig | null>(\n    null,\n  );\n\n  const bucketName = params.bucketName || \"\";\n\n  const displayEvents = hasPermission(bucketName, [\n    IAM_SCOPES.S3_GET_BUCKET_NOTIFICATIONS,\n    IAM_SCOPES.S3_GET_ACTIONS,\n  ]);\n\n  useEffect(() => {\n    if (loadingBucket) {\n      setLoadingEvents(true);\n    }\n  }, [loadingBucket, setLoadingEvents]);\n\n  useEffect(() => {\n    dispatch(setHelpName(\"bucket_detail_events\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (loadingEvents) {\n      if (displayEvents) {\n        api.buckets\n          .listBucketEvents(bucketName)\n          .then((res) => {\n            const events = get(res.data, \"events\", []);\n            setLoadingEvents(false);\n            setRecords(events || []);\n          })\n          .catch((err) => {\n            setLoadingEvents(false);\n            dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n          });\n      } else {\n        setLoadingEvents(false);\n      }\n    }\n  }, [loadingEvents, dispatch, bucketName, displayEvents]);\n\n  const eventsDisplay = (events: string[] | null) => {\n    if (!events) {\n      return \"other\";\n    }\n\n    const cleanEvents = events.reduce((acc: string[], read: string) => {\n      if (!acc.includes(read)) {\n        return [...acc, read];\n      }\n      return acc;\n    }, []);\n\n    return <Fragment>{cleanEvents.join(\", \")}</Fragment>;\n  };\n\n  const confirmDeleteEvent = (evnt: NotificationConfig) => {\n    setDeleteOpen(true);\n    setSelectedEvent(evnt);\n  };\n\n  const closeAddEventAndRefresh = () => {\n    setAddEventScreenOpen(false);\n    setLoadingEvents(true);\n  };\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n    if (refresh) {\n      setLoadingEvents(true);\n    }\n  };\n\n  const tableActions = [{ type: \"delete\", onClick: confirmDeleteEvent }];\n\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeleteEvent\n          deleteOpen={deleteOpen}\n          selectedBucket={bucketName}\n          bucketEvent={selectedEvent}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      {addEventScreenOpen && (\n        <AddEvent\n          open={addEventScreenOpen}\n          selectedBucket={bucketName}\n          closeModalAndRefresh={closeAddEventAndRefresh}\n        />\n      )}\n\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <SecureComponent\n            scopes={[\n              IAM_SCOPES.S3_PUT_BUCKET_NOTIFICATIONS,\n              IAM_SCOPES.S3_PUT_ACTIONS,\n              IAM_SCOPES.ADMIN_SERVER_INFO,\n            ]}\n            resource={bucketName}\n            matchAll\n            errorProps={{ disabled: true }}\n          >\n            <TooltipWrapper tooltip={\"Subscribe to Event\"}>\n              <Button\n                id={\"Subscribe-bucket-event\"}\n                onClick={() => {\n                  setAddEventScreenOpen(true);\n                }}\n                label={\"Subscribe to Event\"}\n                icon={<AddIcon />}\n                variant={\"callAction\"}\n              />\n            </TooltipWrapper>\n          </SecureComponent>\n        }\n      >\n        <HelpTip\n          content={\n            <Fragment>\n              MinIO{\" \"}\n              <a\n                target=\"blank\"\n                href=\"https://min.io/docs/minio/kubernetes/upstream/administration/monitoring.html\"\n              >\n                bucket notifications\n              </a>{\" \"}\n              allow administrators to send notifications to supported external\n              services on certain object or bucket events.\n            </Fragment>\n          }\n          placement=\"right\"\n        >\n          Events\n        </HelpTip>\n      </SectionTitle>\n\n      <Grid container>\n        <Grid item xs={12}>\n          <SecureComponent\n            scopes={[\n              IAM_SCOPES.S3_GET_BUCKET_NOTIFICATIONS,\n              IAM_SCOPES.S3_GET_ACTIONS,\n            ]}\n            resource={bucketName}\n            errorProps={{ disabled: true }}\n          >\n            <DataTable\n              itemActions={tableActions}\n              columns={[\n                { label: \"SQS\", elementKey: \"arn\" },\n                {\n                  label: \"Events\",\n                  elementKey: \"events\",\n                  renderFunction: eventsDisplay,\n                },\n                { label: \"Prefix\", elementKey: \"prefix\" },\n                { label: \"Suffix\", elementKey: \"suffix\" },\n              ]}\n              isLoading={loadingEvents}\n              records={records}\n              entityName=\"Events\"\n              idField=\"id\"\n              customPaperHeight={\"400px\"}\n            />\n          </SecureComponent>\n        </Grid>\n        {!loadingEvents && (\n          <Grid item xs={12}>\n            <br />\n            <HelpBox\n              title={\"Event Notifications\"}\n              iconComponent={<LambdaIcon />}\n              help={\n                <Fragment>\n                  MinIO bucket notifications allow administrators to send\n                  notifications to supported external services on certain object\n                  or bucket events. MinIO supports bucket and object-level S3\n                  events similar to the Amazon S3 Event Notifications.\n                  <br />\n                  <br />\n                  You can learn more at our{\" \"}\n                  <a\n                    href=\"https://min.io/docs/minio/linux/administration/monitoring/bucket-notifications.html?ref=con\"\n                    target=\"_blank\"\n                    rel=\"noopener\"\n                  >\n                    documentation\n                  </a>\n                  .\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default BucketEventsPanel;\n"],"names":["DeleteEvent","withSuspense","React","AddEvent","BucketEventsPanel","dispatch","useAppDispatch","params","useParams","loadingBucket","useSelector","selBucketDetailsLoading","addEventScreenOpen","setAddEventScreenOpen","useState","loadingEvents","setLoadingEvents","records","setRecords","deleteOpen","setDeleteOpen","selectedEvent","setSelectedEvent","bucketName","displayEvents","hasPermission","IAM_SCOPES","S3_GET_BUCKET_NOTIFICATIONS","S3_GET_ACTIONS","useEffect","setHelpName","api","buckets","listBucketEvents","then","res","events","get","data","catch","err","setErrorSnackMessage","errorToHandler","error","tableActions","type","onClick","evnt","_jsxs","Fragment","children","_jsx","selectedBucket","bucketEvent","closeDeleteModalAndRefresh","refresh","open","closeModalAndRefresh","closeAddEventAndRefresh","SectionTitle","separator","sx","marginBottom","actions","SecureComponent","scopes","S3_PUT_BUCKET_NOTIFICATIONS","S3_PUT_ACTIONS","ADMIN_SERVER_INFO","resource","matchAll","errorProps","disabled","TooltipWrapper","tooltip","Button","id","label","icon","AddIcon","variant","HelpTip","content","target","href","placement","Grid","container","item","xs","DataTable","itemActions","columns","elementKey","renderFunction","cleanEvents","reduce","acc","read","includes","join","isLoading","entityName","idField","customPaperHeight","HelpBox","title","iconComponent","LambdaIcon","help","rel"],"sourceRoot":""}