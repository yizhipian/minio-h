{"version":3,"file":"static/js/6140.37801ce8.chunk.js","mappings":"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","sources":["screens/Console/EventDestinations/CustomForms/ConfPostgres.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n  CommentBox,\n  FormLayout,\n  Grid,\n  InputBox,\n  RadioGroup,\n  ReadBox,\n  Select,\n  Switch,\n} from \"mds\";\nimport { IElementValue } from \"../../Configurations/types\";\n\ninterface IConfPostgresProps {\n  onChange: (newValue: IElementValue[]) => void;\n}\n\nconst ConfPostgres = ({ onChange }: IConfPostgresProps) => {\n  //Local States\n  const [useConnectionString, setUseConnectionString] =\n    useState<boolean>(false);\n  const [connectionString, setConnectionString] = useState<string>(\"\");\n  const [host, setHostname] = useState<string>(\"\");\n  const [dbName, setDbName] = useState<string>(\"\");\n  const [port, setPort] = useState<string>(\"\");\n  const [user, setUser] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [sslMode, setSslMode] = useState<string>(\" \");\n\n  const [table, setTable] = useState<string>(\"\");\n  const [format, setFormat] = useState<string>(\"namespace\");\n  const [queueDir, setQueueDir] = useState<string>(\"\");\n  const [queueLimit, setQueueLimit] = useState<string>(\"\");\n  const [comment, setComment] = useState<string>(\"\");\n\n  // connection_string*  (string)             Postgres server connection-string e.g. \"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\"\n\n  //  \"host=localhost\n  // port=5432\n  //dbname=minio_events\n  //user=postgres\n  //password=password\n  //sslmode=disable\"\n\n  // table*              (string)             DB table name to store/update events, table is auto-created\n  // format*             (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\n  // queue_dir           (path)               staging dir for undelivered messages e.g. '/home/events'\n  // queue_limit         (number)             maximum limit for undelivered messages, defaults to '10000'\n  // comment             (sentence)           optionally add a comment to this setting\n\n  const KvSeparator = \"=\";\n  const parseConnectionString = (\n    input: string,\n    keys: string[],\n  ): Map<string, string> => {\n    let valueIndexes: number[] = [];\n\n    for (const key of keys) {\n      const i = input.indexOf(key + KvSeparator);\n      if (i === -1) {\n        continue;\n      }\n      valueIndexes.push(i);\n    }\n    valueIndexes.sort((n1, n2) => n1 - n2);\n\n    let kvFields = new Map<string, string>();\n    let fields: string[] = new Array<string>(valueIndexes.length);\n    for (let i = 0; i < valueIndexes.length; i++) {\n      const j = i + 1;\n      if (j < valueIndexes.length) {\n        fields[i] = input.slice(valueIndexes[i], valueIndexes[j]);\n      } else {\n        fields[i] = input.slice(valueIndexes[i]);\n      }\n    }\n\n    for (let field of fields) {\n      if (field === undefined) {\n        continue;\n      }\n      const key = field.slice(0, field.indexOf(\"=\"));\n      const value = field.slice(field.indexOf(\"=\") + 1).trim();\n      kvFields.set(key, value);\n    }\n    return kvFields;\n  };\n\n  const configToString = useCallback((): string => {\n    let strValue = \"\";\n    if (host !== \"\") {\n      strValue = `${strValue} host=${host}`;\n    }\n    if (dbName !== \"\") {\n      strValue = `${strValue} dbname=${dbName}`;\n    }\n    if (user !== \"\") {\n      strValue = `${strValue} user=${user}`;\n    }\n    if (password !== \"\") {\n      strValue = `${strValue} password=${password}`;\n    }\n    if (port !== \"\") {\n      strValue = `${strValue} port=${port}`;\n    }\n    if (sslMode !== \" \") {\n      strValue = `${strValue} sslmode=${sslMode}`;\n    }\n\n    strValue = `${strValue} `;\n\n    return strValue.trim();\n  }, [host, dbName, user, password, port, sslMode]);\n\n  useEffect(() => {\n    if (connectionString !== \"\") {\n      const formValues = [\n        { key: \"connection_string\", value: connectionString },\n        { key: \"table\", value: table },\n        { key: \"format\", value: format },\n        { key: \"queue_dir\", value: queueDir },\n        { key: \"queue_limit\", value: queueLimit },\n        { key: \"comment\", value: comment },\n      ];\n\n      onChange(formValues);\n    }\n  }, [\n    connectionString,\n    table,\n    format,\n    queueDir,\n    queueLimit,\n    comment,\n    onChange,\n  ]);\n\n  useEffect(() => {\n    const cs = configToString();\n    setConnectionString(cs);\n  }, [\n    user,\n    dbName,\n    password,\n    port,\n    sslMode,\n    host,\n    setConnectionString,\n    configToString,\n  ]);\n\n  useEffect(() => {\n    if (useConnectionString) {\n      // build connection_string\n      const cs = configToString();\n      setConnectionString(cs);\n\n      return;\n    }\n    // parse connection_string\n    const kv = parseConnectionString(connectionString, [\n      \"host\",\n      \"port\",\n      \"dbname\",\n      \"user\",\n      \"password\",\n      \"sslmode\",\n    ]);\n    setHostname(kv.get(\"host\") ? kv.get(\"host\") + \"\" : \"\");\n    setPort(kv.get(\"port\") ? kv.get(\"port\") + \"\" : \"\");\n    setDbName(kv.get(\"dbname\") ? kv.get(\"dbname\") + \"\" : \"\");\n    setUser(kv.get(\"user\") ? kv.get(\"user\") + \"\" : \"\");\n    setPassword(kv.get(\"password\") ? kv.get(\"password\") + \"\" : \"\");\n    setSslMode(kv.get(\"sslmode\") ? kv.get(\"sslmode\") + \"\" : \" \");\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [useConnectionString]);\n\n  return (\n    <FormLayout containerPadding={false} withBorders={false}>\n      <Switch\n        label={\"Manually Configure String\"}\n        checked={useConnectionString}\n        id=\"manualString\"\n        name=\"manualString\"\n        onChange={(e) => {\n          setUseConnectionString(e.target.checked);\n        }}\n        value={\"manualString\"}\n      />\n      {useConnectionString ? (\n        <Fragment>\n          <InputBox\n            id=\"connection-string\"\n            name=\"connection_string\"\n            label=\"Connection String\"\n            value={connectionString}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setConnectionString(e.target.value);\n            }}\n          />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <Box\n              withBorders\n              useBackground\n              sx={{\n                overflowY: \"auto\",\n                height: 170,\n                marginBottom: 12,\n              }}\n            >\n              <InputBox\n                id=\"host\"\n                name=\"host\"\n                label=\"\"\n                placeholder=\"Enter Host\"\n                value={host}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setHostname(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"db-name\"\n                name=\"db-name\"\n                label=\"\"\n                placeholder=\"Enter DB Name\"\n                value={dbName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setDbName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"port\"\n                name=\"port\"\n                label=\"\"\n                placeholder=\"Enter Port\"\n                value={port}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPort(e.target.value);\n                }}\n              />\n              <Select\n                value={sslMode}\n                label=\"\"\n                id=\"sslmode\"\n                name=\"sslmode\"\n                onChange={(value): void => {\n                  if (value) {\n                    setSslMode(value + \"\");\n                  }\n                }}\n                options={[\n                  { label: \"Enter SSL Mode\", value: \" \" },\n                  { label: \"Require\", value: \"require\" },\n                  { label: \"Disable\", value: \"disable\" },\n                  { label: \"Verify CA\", value: \"verify-ca\" },\n                  { label: \"Verify Full\", value: \"verify-full\" },\n                ]}\n              />\n              <InputBox\n                id=\"user\"\n                name=\"user\"\n                label=\"\"\n                placeholder=\"Enter User\"\n                value={user}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setUser(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"password\"\n                name=\"password\"\n                label=\"\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                value={password}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPassword(e.target.value);\n                }}\n              />\n            </Box>\n          </Grid>\n          <ReadBox label={\"Connection String\"} multiLine>\n            {connectionString}\n          </ReadBox>\n        </Fragment>\n      )}\n      <InputBox\n        id=\"table\"\n        name=\"table\"\n        label=\"Table\"\n        placeholder={\"Enter Table Name\"}\n        value={table}\n        tooltip=\"DB table name to store/update events, table is auto-created\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setTable(e.target.value);\n        }}\n      />\n      <RadioGroup\n        currentValue={format}\n        id=\"format\"\n        name=\"format\"\n        label=\"Format\"\n        onChange={(e) => {\n          setFormat(e.target.value);\n        }}\n        tooltip=\"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\"\n        selectorOptions={[\n          { label: \"Namespace\", value: \"namespace\" },\n          { label: \"Access\", value: \"access\" },\n        ]}\n      />\n      <InputBox\n        id=\"queue-dir\"\n        name=\"queue_dir\"\n        label=\"Queue Dir\"\n        placeholder=\"Enter Queue Directory\"\n        value={queueDir}\n        tooltip=\"Staging directory for undelivered messages e.g. '/home/events'\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setQueueDir(e.target.value);\n        }}\n      />\n      <InputBox\n        id=\"queue-limit\"\n        name=\"queue_limit\"\n        label=\"Queue Limit\"\n        placeholder=\"Enter Queue Limit\"\n        type=\"number\"\n        value={queueLimit}\n        tooltip=\"Maximum limit for undelivered messages, defaults to '10000'\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setQueueLimit(e.target.value);\n        }}\n      />\n      <CommentBox\n        id=\"comment\"\n        name=\"comment\"\n        label=\"Comment\"\n        placeholder=\"Enter custom notes if any\"\n        value={comment}\n        onChange={(e) => {\n          setComment(e.target.value);\n        }}\n      />\n    </FormLayout>\n  );\n};\n\nexport default ConfPostgres;\n"],"names":["_ref","onChange","useConnectionString","setUseConnectionString","useState","connectionString","setConnectionString","host","setHostname","dbName","setDbName","port","setPort","user","setUser","password","setPassword","sslMode","setSslMode","table","setTable","format","setFormat","queueDir","setQueueDir","queueLimit","setQueueLimit","comment","setComment","configToString","useCallback","strValue","concat","trim","useEffect","key","value","cs","kv","parseConnectionString","input","keys","valueIndexes","i","indexOf","push","sort","n1","n2","kvFields","Map","fields","Array","length","j","slice","field","undefined","set","get","_jsxs","FormLayout","containerPadding","withBorders","children","_jsx","Switch","label","checked","id","name","e","target","Fragment","InputBox","Grid","item","xs","Box","useBackground","sx","overflowY","height","marginBottom","placeholder","Select","options","type","ReadBox","multiLine","tooltip","RadioGroup","currentValue","selectorOptions","CommentBox"],"sourceRoot":""}