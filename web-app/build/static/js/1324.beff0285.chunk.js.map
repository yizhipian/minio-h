{"version":3,"file":"static/js/1324.beff0285.chunk.js","mappings":"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","sources":["screens/Console/Groups/DeleteGroup.tsx","screens/Console/Groups/AddGroupMember.tsx","screens/Console/Groups/GroupsDetails.tsx","screens/Console/Groups/UsersSelectors.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","utils/sortFunctions.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { ApiError, HttpResponse } from \"api/consoleApi\";\n\ninterface IDeleteGroup {\n  selectedGroups: string[];\n  deleteOpen: boolean;\n  closeDeleteModalAndRefresh: any;\n}\n\nconst DeleteGroup = ({\n  selectedGroups,\n  deleteOpen,\n  closeDeleteModalAndRefresh,\n}: IDeleteGroup) => {\n  const dispatch = useAppDispatch();\n  const onClose = () => closeDeleteModalAndRefresh(false);\n  const [loadingDelete, setLoadingDelete] = useState<boolean>(false);\n\n  if (!selectedGroups) {\n    return null;\n  }\n  const onDeleteGroups = () => {\n    for (let group of selectedGroups) {\n      setLoadingDelete(true);\n      api.group\n        .removeGroup(encodeURLString(group))\n        .then((_) => {\n          closeDeleteModalAndRefresh(true);\n        })\n        .catch(async (res: HttpResponse<void, ApiError>) => {\n          const err = (await res.json()) as ApiError;\n          dispatch(setErrorSnackMessage(errorToHandler(err)));\n          closeDeleteModalAndRefresh(false);\n        })\n        .finally(() => setLoadingDelete(false));\n    }\n  };\n\n  const renderGroups = selectedGroups.map((group) => (\n    <div key={group}>\n      <b>{group}</b>\n    </div>\n  ));\n\n  return (\n    <ConfirmDialog\n      title={`Delete Group${selectedGroups.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={loadingDelete}\n      onConfirm={onDeleteGroups}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete the following{\" \"}\n          {selectedGroups.length === 1 ? \"\" : selectedGroups.length} group\n          {selectedGroups.length > 1 ? \"s?\" : \"?\"}\n          {renderGroups}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteGroup;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { AddMembersToGroupIcon, Button, FormLayout, Grid, ReadBox } from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ntype UserPickerModalProps = {\n  title?: string;\n  preSelectedUsers?: string[];\n  selectedGroup?: string;\n  open: boolean;\n  onClose: () => void;\n  onSaveClick: () => void;\n  groupStatus?: string;\n};\n\nconst AddGroupMember = ({\n  title = \"\",\n  groupStatus = \"enabled\",\n  preSelectedUsers = [],\n  selectedGroup = \"\",\n  open,\n  onClose,\n}: UserPickerModalProps) => {\n  const dispatch = useAppDispatch();\n  const [selectedUsers, setSelectedUsers] = useState(preSelectedUsers);\n\n  function addMembersToGroup() {\n    return api.group\n      .updateGroup(encodeURLString(selectedGroup), {\n        members: selectedUsers,\n        status: groupStatus,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        onClose();\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={onClose}\n      title={title}\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <ReadBox label={`Selected Group`} sx={{ width: \"100%\" }}>\n          {selectedGroup}\n        </ReadBox>\n        <UsersSelectors\n          selectedUsers={selectedUsers}\n          setSelectedUsers={setSelectedUsers}\n          editMode={!selectedGroup}\n        />\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset-add-group-member\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={() => {\n            setSelectedUsers(preSelectedUsers);\n          }}\n          label={\"Reset\"}\n        />\n\n        <Button\n          id={\"save-add-group-member\"}\n          type=\"button\"\n          variant=\"callAction\"\n          onClick={() => {\n            addMembersToGroup();\n          }}\n          label={\"Save\"}\n        />\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default AddGroupMember;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  BackLink,\n  Box,\n  Button,\n  DataTable,\n  Grid,\n  GroupsIcon,\n  IAMPoliciesIcon,\n  PageLayout,\n  ScreenTitle,\n  SectionTitle,\n  Switch,\n  Tabs,\n  TrashIcon,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Group } from \"api/consoleApi\";\nimport {\n  addUserToGroupPermissions,\n  CONSOLE_UI_RESOURCE,\n  createGroupPermissions,\n  editGroupMembersPermissions,\n  enableDisableGroupPermissions,\n  getGroupPermissions,\n  IAM_PAGES,\n  listUsersPermissions,\n  permissionTooltipHelper,\n  setGroupPoliciesPermissions,\n  viewPolicyPermissions,\n  viewUserPermissions,\n} from \"../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { decodeURLString, encodeURLString } from \"../../../common/utils\";\nimport { setHelpName, setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport SetPolicy from \"../Policies/SetPolicy\";\nimport AddGroupMember from \"./AddGroupMember\";\nimport DeleteGroup from \"./DeleteGroup\";\nimport SearchBox from \"../Common/SearchBox\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nexport const formatPolicy = (policy: string = \"\"): string[] => {\n  if (policy.length <= 0) return [];\n  return policy.split(\",\");\n};\n\nconst GroupsDetails = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const [groupDetails, setGroupDetails] = useState<Group>({});\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n  const [usersOpen, setUsersOpen] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [memberFilter, setMemberFilter] = useState<string>(\"\");\n  const [currentTab, setCurrentTab] = useState<string>(\"members\");\n\n  const groupName = decodeURLString(params.groupName || \"\");\n\n  const { members = [], policy = \"\", status: groupEnabled } = groupDetails;\n\n  const filteredMembers = members.filter((elementItem) =>\n    elementItem.includes(memberFilter),\n  );\n\n  const viewUser = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewUserPermissions,\n    true,\n  );\n\n  useEffect(() => {\n    dispatch(setHelpName(\"group_details\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (groupName) {\n      fetchGroupInfo();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [groupName]);\n\n  const groupPolicies = formatPolicy(policy);\n  const isGroupEnabled = groupEnabled === \"enabled\";\n  const memberActionText = members.length > 0 ? \"Edit Members\" : \"Add Members\";\n\n  const getGroupDetails = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    getGroupPermissions,\n  );\n\n  const canEditGroupMembers = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    editGroupMembersPermissions,\n    true,\n  );\n\n  const canSetPolicies = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    setGroupPoliciesPermissions,\n    true,\n  );\n\n  const canViewPolicy = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewPolicyPermissions,\n    true,\n  );\n\n  function fetchGroupInfo() {\n    if (getGroupDetails) {\n      api.group\n        .groupInfo(encodeURLString(groupName))\n        .then((res) => {\n          setGroupDetails(res.data);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setGroupDetails({});\n        });\n    }\n  }\n\n  function toggleGroupStatus(nextStatus: boolean) {\n    return api.group\n      .updateGroup(encodeURLString(groupName), {\n        members: members,\n        status: nextStatus ? \"enabled\" : \"disabled\",\n      })\n      .then(() => {\n        fetchGroupInfo();\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  const groupsTabContent = (\n    <Box\n      onMouseMove={() => {\n        dispatch(setHelpName(\"groups_members\"));\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: 10,\n            }}\n          >\n            <SearchBox\n              placeholder={\"Search members\"}\n              onChange={(searchText) => {\n                setMemberFilter(searchText);\n              }}\n              value={memberFilter}\n              sx={{\n                maxWidth: 280,\n              }}\n            />\n            <SecureComponent\n              resource={CONSOLE_UI_RESOURCE}\n              scopes={addUserToGroupPermissions}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  canEditGroupMembers\n                    ? memberActionText\n                    : permissionTooltipHelper(\n                        createGroupPermissions,\n                        \"edit Group membership\",\n                      )\n                }\n              >\n                <Button\n                  id={\"add-user-group\"}\n                  label={memberActionText}\n                  variant=\"callAction\"\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    setUsersOpen(true);\n                  }}\n                  disabled={!canEditGroupMembers}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        Members\n      </SectionTitle>\n      <Grid item xs={12}>\n        <SecureComponent\n          resource={CONSOLE_UI_RESOURCE}\n          scopes={listUsersPermissions}\n          errorProps={{ disabled: true }}\n        >\n          <TooltipWrapper\n            tooltip={\n              viewUser\n                ? \"\"\n                : permissionTooltipHelper(\n                    viewUserPermissions,\n                    \"view User details\",\n                  )\n            }\n          >\n            <DataTable\n              itemActions={[\n                {\n                  type: \"view\",\n                  onClick: (userName) => {\n                    navigate(`${IAM_PAGES.USERS}/${encodeURLString(userName)}`);\n                  },\n                  isDisabled: !viewUser,\n                },\n              ]}\n              columns={[{ label: \"Access Key\" }]}\n              selectedItems={[]}\n              isLoading={false}\n              records={filteredMembers}\n              entityName=\"Users\"\n            />\n          </TooltipWrapper>\n        </SecureComponent>\n      </Grid>\n    </Box>\n  );\n\n  const policiesTabContent = (\n    <Fragment>\n      <Box\n        onMouseMove={() => {\n          dispatch(setHelpName(\"groups_policies\"));\n        }}\n      >\n        <SectionTitle\n          separator\n          sx={{ marginBottom: 15 }}\n          actions={\n            <TooltipWrapper\n              tooltip={\n                canSetPolicies\n                  ? \"Set Policies\"\n                  : permissionTooltipHelper(\n                      setGroupPoliciesPermissions,\n                      \"assign Policies\",\n                    )\n              }\n            >\n              <Button\n                id={\"set-policies\"}\n                label={`Set Policies`}\n                variant=\"callAction\"\n                icon={<IAMPoliciesIcon />}\n                onClick={() => {\n                  setPolicyOpen(true);\n                }}\n                disabled={!canSetPolicies}\n              />\n            </TooltipWrapper>\n          }\n        >\n          Policies\n        </SectionTitle>\n      </Box>\n      <Grid item xs={12}>\n        <TooltipWrapper\n          tooltip={\n            canViewPolicy\n              ? \"\"\n              : permissionTooltipHelper(\n                  viewPolicyPermissions,\n                  \"view Policy details\",\n                )\n          }\n        >\n          <DataTable\n            itemActions={[\n              {\n                type: \"view\",\n                onClick: (policy) => {\n                  navigate(`${IAM_PAGES.POLICIES}/${encodeURLString(policy)}`);\n                },\n                isDisabled: !canViewPolicy,\n              },\n            ]}\n            columns={[{ label: \"Policy\" }]}\n            isLoading={false}\n            records={groupPolicies}\n            entityName=\"Policies\"\n          />\n        </TooltipWrapper>\n      </Grid>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      {policyOpen ? (\n        <SetPolicy\n          open={policyOpen}\n          selectedGroups={[groupName]}\n          selectedUser={null}\n          closeModalAndRefresh={() => {\n            setPolicyOpen(false);\n            fetchGroupInfo();\n            dispatch(setSelectedPolicies([]));\n          }}\n        />\n      ) : null}\n\n      {usersOpen ? (\n        <AddGroupMember\n          selectedGroup={groupName}\n          onSaveClick={() => {}}\n          title={memberActionText}\n          groupStatus={groupEnabled}\n          preSelectedUsers={members}\n          open={usersOpen}\n          onClose={() => {\n            setUsersOpen(false);\n            fetchGroupInfo();\n          }}\n        />\n      ) : null}\n\n      {deleteOpen && (\n        <DeleteGroup\n          deleteOpen={deleteOpen}\n          selectedGroups={[groupName]}\n          closeDeleteModalAndRefresh={(isDelSuccess: boolean) => {\n            setDeleteOpen(false);\n            if (isDelSuccess) {\n              navigate(IAM_PAGES.GROUPS);\n            }\n          }}\n        />\n      )}\n      <PageHeaderWrapper\n        label={\n          <Fragment>\n            <BackLink\n              label={\"Groups\"}\n              onClick={() => navigate(IAM_PAGES.GROUPS)}\n            />\n          </Fragment>\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid item xs={12}>\n          <ScreenTitle\n            icon={\n              <Fragment>\n                <GroupsIcon width={40} />\n              </Fragment>\n            }\n            title={groupName}\n            subTitle={null}\n            bottomBorder\n            actions={\n              <Box\n                sx={{\n                  display: \"flex\",\n                  fontSize: 14,\n                  alignItems: \"center\",\n                  gap: 15,\n                }}\n              >\n                <span>Group Status:</span>\n                <span id=\"group-status-label\" style={{ fontWeight: \"bold\" }}>\n                  {isGroupEnabled ? \"Enabled\" : \"Disabled\"}\n                </span>\n                <TooltipWrapper\n                  tooltip={\n                    hasPermission(\n                      CONSOLE_UI_RESOURCE,\n                      enableDisableGroupPermissions,\n                      true,\n                    )\n                      ? \"\"\n                      : permissionTooltipHelper(\n                          enableDisableGroupPermissions,\n                          \"enable or disable Groups\",\n                        )\n                  }\n                >\n                  <SecureComponent\n                    resource={CONSOLE_UI_RESOURCE}\n                    scopes={enableDisableGroupPermissions}\n                    errorProps={{ disabled: true }}\n                    matchAll\n                  >\n                    <Switch\n                      indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                      checked={isGroupEnabled}\n                      value={\"group_enabled\"}\n                      id=\"group-status\"\n                      name=\"group-status\"\n                      onChange={() => {\n                        toggleGroupStatus(!isGroupEnabled);\n                      }}\n                      switchOnly\n                    />\n                  </SecureComponent>\n                </TooltipWrapper>\n\n                <TooltipWrapper tooltip={\"Delete Group\"}>\n                  <Button\n                    id={\"delete-user-group\"}\n                    variant=\"secondary\"\n                    icon={<TrashIcon />}\n                    onClick={() => {\n                      setDeleteOpen(true);\n                    }}\n                  />\n                </TooltipWrapper>\n              </Box>\n            }\n            sx={{ marginBottom: 15 }}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <Tabs\n            options={[\n              {\n                tabConfig: { id: \"members\", label: \"Members\" },\n                content: groupsTabContent,\n              },\n              {\n                tabConfig: { id: \"policies\", label: \"Policies\" },\n                content: policiesTabContent,\n              },\n            ]}\n            currentTabOrPath={currentTab}\n            onTabClick={setCurrentTab}\n          />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\n\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n}\n\nconst UsersSelectors = ({\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api.users\n      .listUsers()\n      .then((res) => {\n        let users = get(res.data, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      <Box>\n        {loading && <ProgressBar />}\n        {records?.length > 0 ? (\n          <Fragment>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SearchBox\n                label={editMode ? \"Edit Members\" : \"Assign Users\"}\n                placeholder=\"Filter Users\"\n                onChange={setFilter}\n                value={filter}\n              />\n            </Grid>\n            <DataTable\n              columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n              onSelect={selectionChanged}\n              selectedItems={selUsers}\n              isLoading={loading}\n              records={filteredRecords}\n              entityName=\"Users\"\n              idField=\"accessKey\"\n              customPaperHeight={\"200px\"}\n            />\n          </Fragment>\n        ) : (\n          <Box\n            sx={{\n              textAlign: \"center\",\n              padding: \"10px 0\",\n            }}\n          >\n            No Users to display\n          </Box>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default UsersSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n"],"names":["_ref","selectedGroups","deleteOpen","closeDeleteModalAndRefresh","dispatch","useAppDispatch","loadingDelete","setLoadingDelete","useState","renderGroups","map","group","_jsx","children","ConfirmDialog","title","concat","length","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onDeleteGroups","api","removeGroup","encodeURLString","then","_","catch","async","err","res","json","setErrorSnackMessage","errorToHandler","finally","onClose","confirmationContent","_jsxs","Fragment","groupStatus","preSelectedUsers","selectedGroup","open","selectedUsers","setSelectedUsers","ModalWrapper","modalOpen","AddMembersToGroupIcon","FormLayout","withBorders","containerPadding","ReadBox","label","sx","width","UsersSelectors","editMode","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","id","type","variant","onClick","updateGroup","members","status","setModalErrorSnackMessage","error","formatPolicy","policy","arguments","undefined","split","GroupsDetails","navigate","useNavigate","params","useParams","groupDetails","setGroupDetails","policyOpen","setPolicyOpen","usersOpen","setUsersOpen","setDeleteOpen","memberFilter","setMemberFilter","currentTab","setCurrentTab","groupName","decodeURLString","groupEnabled","filteredMembers","filter","elementItem","includes","viewUser","hasPermission","CONSOLE_UI_RESOURCE","viewUserPermissions","useEffect","setHelpName","fetchGroupInfo","groupPolicies","isGroupEnabled","memberActionText","getGroupDetails","getGroupPermissions","canEditGroupMembers","editGroupMembersPermissions","canSetPolicies","setGroupPoliciesPermissions","canViewPolicy","viewPolicyPermissions","groupInfo","data","groupsTabContent","Box","onMouseMove","SectionTitle","separator","marginBottom","actions","display","gap","SearchBox","placeholder","onChange","searchText","value","maxWidth","SecureComponent","resource","scopes","addUserToGroupPermissions","errorProps","disabled","TooltipWrapper","tooltip","permissionTooltipHelper","createGroupPermissions","icon","AddIcon","listUsersPermissions","DataTable","itemActions","userName","IAM_PAGES","USERS","isDisabled","columns","selectedItems","records","entityName","policiesTabContent","IAMPoliciesIcon","POLICIES","SetPolicy","selectedUser","closeModalAndRefresh","setSelectedPolicies","AddGroupMember","onSaveClick","DeleteGroup","isDelSuccess","GROUPS","PageHeaderWrapper","BackLink","HelpMenu","PageLayout","ScreenTitle","GroupsIcon","subTitle","bottomBorder","fontSize","alignItems","style","fontWeight","enableDisableGroupPermissions","matchAll","Switch","indicatorLabels","checked","name","nextStatus","switchOnly","TrashIcon","Tabs","options","tabConfig","content","currentTabOrPath","onTabClick","setRecords","loading","setFilter","fetchUsers","useCallback","users","listUsers","get","sort","usersSort","selUsers","filteredRecords","accessKey","className","ProgressBar","elementKey","onSelect","e","targetD","target","elements","push","element","idField","customPaperHeight","textAlign","padding","noTitle","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","policies","listPolicies","_res$data$policies","policySort","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","groupPolicy","userPolicy","join","PolicySelectors","resetSelection","color","setPolicyAction","groups","a","b","stringSort","policyDetailsSort"],"sourceRoot":""}